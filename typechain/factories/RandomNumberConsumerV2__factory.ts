/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BytesLike,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  RandomNumberConsumerV2,
  RandomNumberConsumerV2Interface,
} from "../RandomNumberConsumerV2";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint64",
        name: "subscriptionId",
        type: "uint64",
      },
      {
        internalType: "address",
        name: "vrfCoordinator",
        type: "address",
      },
      {
        internalType: "address",
        name: "link",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "keyHash",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "have",
        type: "address",
      },
      {
        internalType: "address",
        name: "want",
        type: "address",
      },
    ],
    name: "OnlyCoordinatorCanFulfill",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "ReturnedRandomness",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "rawFulfillRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "requestRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "s_randomWords",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "s_requestId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x610180604052620186a063ffffffff166101209063ffffffff16815250600361ffff166101409061ffff16815250600263ffffffff166101609063ffffffff168152503480156200004f57600080fd5b5060405162000c3c38038062000c3c83398181016040528101906200007591906200026d565b828073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508273ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff168152505080610100818152505033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508367ffffffffffffffff1660e08167ffffffffffffffff168152505050505050620002df565b600080fd5b600067ffffffffffffffff82169050919050565b620001a78162000188565b8114620001b357600080fd5b50565b600081519050620001c7816200019c565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001fa82620001cd565b9050919050565b6200020c81620001ed565b81146200021857600080fd5b50565b6000815190506200022c8162000201565b92915050565b6000819050919050565b620002478162000232565b81146200025357600080fd5b50565b60008151905062000267816200023c565b92915050565b600080600080608085870312156200028a576200028962000183565b5b60006200029a87828801620001b6565b9450506020620002ad878288016200021b565b9350506040620002c0878288016200021b565b9250506060620002d38782880162000256565b91505092959194509250565b60805160a05160c05160e051610100516101205161014051610160516108f46200034860003960006102a10152600061025f015260006102800152600061021d0152600061023e01526000505060006101e101526000818160c7015261011b01526108f46000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631fe543e314610051578063e0c862891461006d578063e89e106a14610077578063f6eaffc814610095575b600080fd5b61006b600480360381019061006691906105b4565b6100c5565b005b610075610185565b005b61007f61032b565b60405161008c919061061f565b60405180910390f35b6100af60048036038101906100aa919061063a565b610331565b6040516100bc919061061f565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461017757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161016e9291906106a8565b60405180910390fd5b6101818282610355565b5050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101df57600080fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006040518663ffffffff1660e01b81526004016102e0959493929190610749565b6020604051808303816000875af11580156102ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032391906107b1565b600181905550565b60015481565b6000818154811061034157600080fd5b906000526020600020016000915090505481565b806000908051906020019061036b9291906103a7565b507fefb16d61046900da527008568620fb9f8420e2f5ed4de3bfbded5035c9362b0e8160405161039b919061089c565b60405180910390a15050565b8280548282559060005260206000209081019282156103e3579160200282015b828111156103e25782518255916020019190600101906103c7565b5b5090506103f091906103f4565b5090565b5b8082111561040d5760008160009055506001016103f5565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61043881610425565b811461044357600080fd5b50565b6000813590506104558161042f565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6104a982610460565b810181811067ffffffffffffffff821117156104c8576104c7610471565b5b80604052505050565b60006104db610411565b90506104e782826104a0565b919050565b600067ffffffffffffffff82111561050757610506610471565b5b602082029050602081019050919050565b600080fd5b600061053061052b846104ec565b6104d1565b9050808382526020820190506020840283018581111561055357610552610518565b5b835b8181101561057c57806105688882610446565b845260208401935050602081019050610555565b5050509392505050565b600082601f83011261059b5761059a61045b565b5b81356105ab84826020860161051d565b91505092915050565b600080604083850312156105cb576105ca61041b565b5b60006105d985828601610446565b925050602083013567ffffffffffffffff8111156105fa576105f9610420565b5b61060685828601610586565b9150509250929050565b61061981610425565b82525050565b60006020820190506106346000830184610610565b92915050565b6000602082840312156106505761064f61041b565b5b600061065e84828501610446565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061069282610667565b9050919050565b6106a281610687565b82525050565b60006040820190506106bd6000830185610699565b6106ca6020830184610699565b9392505050565b6000819050919050565b6106e4816106d1565b82525050565b600067ffffffffffffffff82169050919050565b610707816106ea565b82525050565b600061ffff82169050919050565b6107248161070d565b82525050565b600063ffffffff82169050919050565b6107438161072a565b82525050565b600060a08201905061075e60008301886106db565b61076b60208301876106fe565b610778604083018661071b565b610785606083018561073a565b610792608083018461073a565b9695505050505050565b6000815190506107ab8161042f565b92915050565b6000602082840312156107c7576107c661041b565b5b60006107d58482850161079c565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61081381610425565b82525050565b6000610825838361080a565b60208301905092915050565b6000602082019050919050565b6000610849826107de565b61085381856107e9565b935061085e836107fa565b8060005b8381101561088f5781516108768882610819565b975061088183610831565b925050600181019050610862565b5085935050505092915050565b600060208201905081810360008301526108b6818461083e565b90509291505056fea2646970667358221220d686101378b2e9d1dcc9ed9f274466fa8ee84699deabe22b424026d12ffc045f64736f6c634300080a0033";

type RandomNumberConsumerV2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RandomNumberConsumerV2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RandomNumberConsumerV2__factory extends ContractFactory {
  constructor(...args: RandomNumberConsumerV2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "RandomNumberConsumerV2";
  }

  deploy(
    subscriptionId: BigNumberish,
    vrfCoordinator: string,
    link: string,
    keyHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<RandomNumberConsumerV2> {
    return super.deploy(
      subscriptionId,
      vrfCoordinator,
      link,
      keyHash,
      overrides || {}
    ) as Promise<RandomNumberConsumerV2>;
  }
  getDeployTransaction(
    subscriptionId: BigNumberish,
    vrfCoordinator: string,
    link: string,
    keyHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      subscriptionId,
      vrfCoordinator,
      link,
      keyHash,
      overrides || {}
    );
  }
  attach(address: string): RandomNumberConsumerV2 {
    return super.attach(address) as RandomNumberConsumerV2;
  }
  connect(signer: Signer): RandomNumberConsumerV2__factory {
    return super.connect(signer) as RandomNumberConsumerV2__factory;
  }
  static readonly contractName: "RandomNumberConsumerV2";
  public readonly contractName: "RandomNumberConsumerV2";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RandomNumberConsumerV2Interface {
    return new utils.Interface(_abi) as RandomNumberConsumerV2Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RandomNumberConsumerV2 {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as RandomNumberConsumerV2;
  }
}
